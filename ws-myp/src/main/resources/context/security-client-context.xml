<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd"
    >

<!-- 
	You define the method you want secured based on an annotation.  So you would add the following to a method signature if you wanted it to be 
secured to the ROLE_HF_USER
@PreAuthorize("hasRole('ROLE_HF_USER')")

 -->
 
   <alias name="playerManager" alias="userService"/>
    
	<security:http entry-point-ref="preAuthEntryPoint" use-expressions="true" create-session="stateless" pattern="/rest/**">
    	<security:custom-filter position="PRE_AUTH_FILTER" ref="authenticationFilter" />		
		<security:intercept-url pattern="/**" access="permitAll()"/>
    </security:http>
    
    <bean id="authenticationFilter" class="com.makeurpicks.web.filter.AuthenicationFilter">
	  <property name="playerManager" ref="playerManager"/>
    </bean>
    
    <security:http entry-point-ref="facebookEntryPoint">
        <security:custom-filter after="CAS_FILTER" ref="oAuthFilter" />
        <security:intercept-url pattern="/facebook.html" access="IS_AUTHENTICATED_FULLY" />
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:logout />
    </security:http>
    
    

</beans>